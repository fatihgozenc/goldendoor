{"version":3,"file":"static/webpack/static/development/pages/team.js.2436073131c52c45bc26.hot-update.js","sources":["webpack:///./components/carousel/index.js"],"sourcesContent":["import Icon from '../Icon';\nimport parse from 'html-react-parser';\nimport Obfuscate from 'react-obfuscate';\nimport './style.scss';\n\nconst IMG_WIDTH = 300;\nconst IMG_HEIGHT = 300;\nconst parentPad = 0;\nconst VISIBLEIMAGES = 3;\nconst DURATION = 750;\n\nexport default function (props) {\n\tconst {\n\t\timgList = [],\n\t\timg_width = IMG_WIDTH,\n\t\timg_height = IMG_HEIGHT,\n\t\tvisibleImages = VISIBLEIMAGES,\n\t\tduration = DURATION,\n\t\tautoNext = false,\n\t\ttimeForNext = 3000\n\t} = props;\n\n\tconst [currFirstImg, setCurrFirstImg] = React.useState(0);\n\tconst [actualFirst, setActualFirst] = React.useState('');\n\tconst [visibleItemsProps, setVisibleItemsProps] = React.useState({ order: [], styles: {} });\n\tconst currMiddleImgRef = React.useRef(0);\n\tconst intervalRef = React.useRef(0);\n\tconst imgDifference = React.useRef(1);\n\tconst durationRef = React.useRef(duration);\n\tconst wrapper = React.useRef();\n\n\tconst parentHeight = img_height + 2 * parentPad;\n\tconst parentWidth = img_width * 3;\n\tconst elementsInLeft = Math.ceil(visibleImages / 2);\n\tconst elementsInRight = visibleImages - elementsInLeft;\n\n\tconst changeCenter = ({ event, index }) => {\n\t\tconst currFirstImgIndex = visibleItemsProps.order.indexOf(currFirstImg);\n\t\tconst prevIndex = visibleItemsProps.order[currFirstImgIndex - 1];\n\t\tconst nextIndex = visibleItemsProps.order[currFirstImgIndex + 1];\n\t\tif (index !== currFirstImg) {\n\t\t\tif (index === prevIndex || index === nextIndex) {\n\t\t\t\tsetCurrFirstImg(index);\n\t\t\t} else {\n\t\t\t\tconst val = currFirstImgIndex - visibleItemsProps.order.indexOf(index);\n\t\t\t\timgDifference.current = Math.abs(val);\n\t\t\t\tsetActualFirst(index);\n\t\t\t\tcycleToNextImage(index);\n\t\t\t}\n\t\t} else {\n\t\t\tnull;\n\t\t}\n\t}\n\n\tconst cycleToNextImage = (actual) => {\n\t\tif (visibleItemsProps.order.indexOf(currMiddleImgRef.current) > visibleItemsProps.order.indexOf(actual)) {\n\t\t\t// Right side image click\n\t\t\tcurrMiddleImgRef.current = currMiddleImgRef.current - 1 > -1 ? currMiddleImgRef.current - 1 : imgList.length - 1;\n\t\t\t// Right side image click\n\t\t\tsetCurrFirstImg(currMiddleImgRef.current);\n\t\t} else {\n\t\t\t// Left side image click\n\t\t\tcurrMiddleImgRef.current = (currMiddleImgRef.current + 1) < imgList.length ? (currMiddleImgRef.current + 1) : 0;\n\t\t\t// Conditions to handle cycle\n\t\t\tsetCurrFirstImg(currMiddleImgRef.current);\n\t\t}\n\t}\n\tconst gapBetween = props.name === 'team' ? 4 : 4.4 \n\tconst constructVisibleItemsProps = () => {\n\t\tconst visibleItemsProps = {};\n\t\t// To store config for items that are visibile in the carousel\n\t\tvisibleItemsProps.order = [];\n\t\tlet curr_center = currFirstImg;\n\t\t// Storing the Current Middle element in focus\n\t\tlet timesToIterate = 0;\n\t\t// To iterate through all visible number of images.\n\t\tlet zIndex = - elementsInRight;\n\t\t// We start from left to right and Zindex has to keep on increasing till middle then has to reduce.\n\t\tlet xTranslate = img_width;\n\t\t// To move the element with respect to x axis\n\t\tlet zTranslate = 0;\n\t\t// To reduce image size for images apart from center\n\t\tlet opacity = 1;\n\t\t// ARALIKLAR BURADA = 4\n\t\tconst division = (img_width * (4.2 / elementsInLeft));\n\t\t// Specifies the length that next image has to move away from with respect to current image (1.6 times the current image)\n\t\tlet opacityDivider = (1 / elementsInRight);\n\t\t// minimum opacity should be 0.3 (1-0.7)\n\t\tlet rightEltCount = elementsInRight;\n\t\tlet leftEltCount = elementsInLeft;\n\t\t// including middle element\n\t\tlet curr_center_copy = curr_center;\n\n\t\twhile (timesToIterate < visibleImages) {\n\t\t\tconst styles = {};\n\t\t\tlet currImgIndex;\n\t\t\tlet currImgIndexOnRight = true;\n\t\t\t// Tells if in this iteration the currently iterated image lies left to the middle image or not\n\n\t\t\t// To set properties for elements in right side\n\t\t\tif (timesToIterate < elementsInRight) {\n\t\t\t\tconst nextIndex = curr_center - (rightEltCount);\n\t\t\t\tcurrImgIndex = nextIndex > -1 ? nextIndex : imgList.length - Math.abs(nextIndex);\n\t\t\t\t// Gives the rightmost elemnt in first iteration and then the subsequent elements down the iteration\n\t\t\t\topacity = 1 - (opacityDivider * rightEltCount);\n\t\t\t\t// To assign lowest opacity to last element and increaing it till we come to middle\n\t\t\t\tzTranslate = -division * rightEltCount;\n\t\t\t\t// To increase the size of the images subsequently from last to middle\n\t\t\t\txTranslate = img_width - (division * rightEltCount);\n\t\t\t\t// X coordinate position\n\t\t\t\trightEltCount--;\n\t\t\t} else {\n\t\t\t\t// To set properties for elements in center and to left of it. All props behaves similar to right\n\t\t\t\tcurrImgIndexOnRight = false;\n\t\t\t\tcurrImgIndex = curr_center_copy;\n\t\t\t\tif (curr_center_copy + 1 >= imgList.length) {\n\t\t\t\t\t// to maintain cyclic carousel\n\t\t\t\t\tcurr_center_copy = 0;\n\t\t\t\t} else {\n\t\t\t\t\tcurr_center_copy++;\n\t\t\t\t}\n\t\t\t\topacity = 1 - (opacityDivider * Math.abs(leftEltCount - (timesToIterate + 1)));\n\t\t\t\tzTranslate = - division * Math.abs(leftEltCount - (timesToIterate + 1));\n\t\t\t\txTranslate = img_width + division * Math.abs(leftEltCount - (timesToIterate + 1));\n\t\t\t}\n\n\t\t\t// Assigning above calculated values to 'styles' object\n\t\t\tstyles.transform = 'translateX(' + xTranslate + 'px) translateZ(' + zTranslate + 'px)';\n\t\t\tstyles.opacity = opacity;\n\t\t\tstyles.zIndex = currImgIndexOnRight ? zIndex++ : zIndex--;\n\t\t\t// To reduce zIndex while going through left elements\n\t\t\tvisibleItemsProps.order.push(currImgIndex);\n\t\t\t// Push the current image number in the orders array\n\t\t\tvisibleItemsProps[currImgIndex] = { styles };\n\t\t\t// pushing all previously created styles\n\t\t\ttimesToIterate++;\n\t\t}\n\t\tdurationRef.current = actualFirst === '' ? duration : ((duration / imgDifference.current));\n\t\t// duration will be user given if he clicks next image or\n\t\t// we divide the duration by number of images skipped\n\t\tsetVisibleItemsProps(visibleItemsProps);\n\t\t// setting state for visible items\n\t}\n\n\tReact.useEffect(() => {\n\t\tclearInterval(intervalRef.current);\n\t\tif (actualFirst !== '') {\n\t\t\tintervalRef.current = setInterval(() => {\n\t\t\t\tif (actualFirst !== '' && actualFirst !== currMiddleImgRef.current) {\n\t\t\t\t\t// If the currentimage in middle is not actually clicked image then gotoNext image\n\t\t\t\t\tcycleToNextImage(actualFirst);\n\t\t\t\t} else if (actualFirst !== '' && actualFirst === currMiddleImgRef.current) {\n\t\t\t\t\tsetActualFirst('');\n\t\t\t\t\timgDifference.current = 1;\n\t\t\t\t\tclearInterval(intervalRef.current);\n\t\t\t\t\t// If actual clicked and middle image are same we are all set to clear intervals, as they are unnecessary now\n\t\t\t\t}\n\t\t\t}, durationRef.current - 100);\n\t\t\t// Introduced an advance of 100ms to begin bringing nextimage\n\t\t\t// to middle before the previous one settles down else it looks jerky\n\t\t}\n\t}, [actualFirst]);\n\n\tReact.useEffect(() => {\n\t\tconstructVisibleItemsProps();\n\t\t// This constructs all css properties to the elements in visibility\n\t\tcurrMiddleImgRef.current = currFirstImg;\n\t\t// Need to set it here as well so while accessing inside interval it will have the latest value\n\t}, [currFirstImg]);\n\n\tReact.useEffect(() => {\n\t\tif (autoNext) {\n\t\t\tsetInterval(() => {\n\t\t\t\tconst nextImg = currMiddleImgRef.current + 1 < imgList.length ? currMiddleImgRef.current + 1 : 0;\n\t\t\t\tsetCurrFirstImg(nextImg);\n\t\t\t}, timeForNext);\n\t\t}\n\t}, []);\n\n\tconst [middleImageKey, setMiddleImageKey] = React.useState(0);\n\n\tconst loadCarousel = () => {\n\t\treturn (\n\t\t\t<div className={`carousel__3D carousel__3D--${props.name}`}>\n\t\t\t\t<ul ref={wrapper}\n\t\t\t\t\tclassName=\"carousel__wrapper\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\theight: parentHeight + 'px',\n\t\t\t\t\t\twidth: parentWidth + 'px',\n\t\t\t\t\t\tpadding: parentPad + 'px',\n\t\t\t\t\t\tperspective: '500px'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\timgList.map((image, index) => {\n\t\t\t\t\t\t\tconst displayNone = visibleItemsProps.order.indexOf(index) === -1;\n\t\t\t\t\t\t\t// To not to show images that are out of visibility scope\n\t\t\t\t\t\t\tconst styles = visibleItemsProps[index] ? visibleItemsProps[index].styles : {};\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={index}\n\t\t\t\t\t\t\t\t\tclassName={'carousel__item ' + (displayNone ? 'd-none' : '')}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t...styles,\n\t\t\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\t\t\ttransition: `all ${durationRef.current}ms ease `\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\tchangeCenter({ e, index })\n\t\t\t\t\t\t\t\t\t\tsetMiddleImageKey(index)\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t<img src={image} alt={'img'} width={img_width} height={img_height} />\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</ul>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`carousel__infos carousel__infos--${props.name}`}>\n\t\t\t\t\t{props.name === \"team\"\n\n\t\t\t\t\t\t? (\n\n\t\t\t\t\t\t\tprops.data.map((item, key) => (\n\t\t\t\t\t\t\t\tkey === middleImageKey &&\n\t\t\t\t\t\t\t\t<div key={key} className=\"infos__item\">\n\t\t\t\t\t\t\t\t\t<h3>{item.mitarbeiter_name}</h3>\n\t\t\t\t\t\t\t\t\t<h4>{item.mitarbeiter_titel}</h4>\n\t\t\t\t\t\t\t\t\t<Obfuscate email={item.mitarbeiter_email} />\n\t\t\t\t\t\t\t\t\t<Obfuscate tel={item.mitarbeiter_telefon} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))\n\n\t\t\t\t\t\t) : (\n\n\t\t\t\t\t\t\tprops.data.map((item, key) => (\n\t\t\t\t\t\t\t\tkey === middleImageKey &&\n\t\t\t\t\t\t\t\t<div key={key} className=\"infos__item infos__item--downloads\">\n\t\t\t\t\t\t\t\t\t<h4>{item.name}</h4>\n\t\t\t\t\t\t\t\t\t<a href={item.link} target=\"_blank\" className=\"singleloc__button\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"factsheet\" name=\"DOWNLOAD\" />\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))\n\n\t\t\t\t\t\t)\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{\n\t\t\t\t\tprops.name === \"downloads\" &&\n\t\t\t\t\t<div className=\"download__section--factsheet\">\n\t\t\t\t\t\t<h2>Factsheets</h2>\n\t\t\t\t\t\t{parse(props.content.Inhalt)}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{loadCarousel()}\n\t\t</>\n\t);\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAaA;AAAA;AAAA;AAbA;AAAA;AAAA;AACA;AAavKA;AAAA;AAAA;AAAA;AACA;AAyKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAVA;AAWA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AADA;AAMA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AANA;AAYA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAiBA;AAAA;AAQA;AACA;AACA;AAKA;;;;A","sourceRoot":""}