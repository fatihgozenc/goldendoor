{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport parse from 'html-react-parser';\nimport DatePicker from 'react-datepicker';\nimport { useForm } from 'react-hook-form';\nimport { NextSeo } from 'next-seo';\nimport { useDropzone } from 'react-dropzone';\nimport Breadcrumb from '../../Breadcrumb';\nimport serialize from 'serialize-javascript';\nimport Icon from '../../Icon';\nimport './style.scss';\nexport default (({\n  data,\n  language\n}) => {\n  const formFields = data.fields.karriere_bewerbung;\n  const [jobStartDate, setJobStartDate] = React.useState(new Date());\n\n  const collapseBlock = el => {\n    let sectionHeight = el.scrollHeight;\n    let elTransition = el.style.transition;\n    el.style.transition = '';\n    requestAnimationFrame(function () {\n      el.style.height = sectionHeight + 'px';\n      el.style.transition = elTransition;\n      requestAnimationFrame(function () {\n        el.style.height = 6 + 'rem';\n      });\n    });\n  };\n\n  const expandBlock = el => {\n    let sectionHeight = el.scrollHeight;\n    el.style.height = sectionHeight + 'px';\n\n    let trigger = el => {\n      el.addEventListener('transitionend', function (e) {\n        el.removeEventListener('transitionend', trigger);\n        el.style.height = null;\n      });\n    };\n  };\n\n  const openBlock = e => {\n    const entryContainer = e.currentTarget.parentElement.parentElement;\n    let isCollapsed = entryContainer.getAttribute('data-collapsed') === 'true';\n    console.log(isCollapsed);\n\n    if (isCollapsed) {\n      collapseBlock(entryContainer);\n      entryContainer.setAttribute('data-collapsed', 'false');\n    } else {\n      expandBlock(entryContainer);\n      entryContainer.setAttribute('data-collapsed', 'true');\n    }\n\n    console.log(e.currentTarget);\n    e.currentTarget.firstElementChild.classList.toggle('rotateSymbol');\n  };\n\n  const uploadText = formFields.bewerbung_hochladen;\n  const uploadMessages = formFields.formnachrichten;\n  const [uploadedFile, setUploadedFile] = React.useState({\n    file: '',\n    buffer: {}\n  });\n  const onDrop = React.useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(uploadMessages[1].text);\n\n      reader.onerror = () => console.log(uploadMessages[1].text);\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        setUploadedFile({\n          buffer: binaryStr\n        });\n      };\n\n      reader.readAsArrayBuffer(file);\n      console.log(file);\n      setUploadedFile({\n        file: file\n      });\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n  const uploadTextParts = uploadText.split(' ');\n  const [submitted, setSubmitted] = React.useState(false);\n  const {\n    handleSubmit,\n    register,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    const formData = {\n      lang: language,\n      contactType: \"jobApplication\",\n      name: language === 'de' ? data.bewerbung_vorname : data.bewerbung_name,\n      surname: language === 'de' ? data.bewerbung_name : data.bewerbung_surname,\n      email: data.bewerbung_email,\n      position: data.job_position,\n      jobstatus: data.job_status,\n      startdate: jobStartDate.toDateString(),\n      message: data.job_message,\n      attachment: uploadedFile\n    };\n    fetch('/api/kontakt', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        'Content-Disposition': 'attachment'\n      },\n      body: serialize(formData)\n    }).then(res => {\n      res.status === 200 ? setSubmitted(!submitted) : '';\n    }).catch(err => console.log(err));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(NextSeo, {\n    title: data.fields.seo.title,\n    description: data.fields.seo.description\n  }), __jsx(\"div\", {\n    className: \"page__title page__title--contact\"\n  }, __jsx(Breadcrumb, {\n    slug: data.slug,\n    title: data.title\n  }), __jsx(\"h1\", null, data.title)), __jsx(\"div\", {\n    className: \"career\"\n  }, data.fields.karriere_eintrage.map((item, key) => __jsx(\"div\", {\n    key: key,\n    className: \"career__entry--wrapper\"\n  }, __jsx(\"div\", {\n    className: \"career__entry\",\n    \"data-collapsed\": \"false\"\n  }, __jsx(\"div\", {\n    className: \"career__entry--block career__entry--util\"\n  }, item.info.arbeitszeit), __jsx(\"div\", {\n    className: \"career__entry--block career__entry--info\"\n  }, __jsx(\"h3\", null, item.info.titel), parse(item.beschreibung), __jsx(\"a\", {\n    href: \"#bewerbung\",\n    className: \"golden__button button--bewerbung\"\n  }, formFields.bewerbung_button)), __jsx(\"div\", {\n    className: \"career__entry--block career__entry--util\"\n  }, item.info.standort), __jsx(\"div\", {\n    className: \"career__entry--block\"\n  }, __jsx(\"a\", {\n    href: `#job-${key}`,\n    onClick: e => openBlock(e)\n  }, __jsx(Icon, {\n    type: \"plus\"\n  }))))))), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    id: \"bewerbung\",\n    className: \"career__application\"\n  }, __jsx(\"h2\", null, formFields.bewerbung_titel), __jsx(\"div\", {\n    className: \"contact__step--flexWrapper\"\n  }, _Object$values(formFields.bewerbung_etiketten).map((item, key) => __jsx(\"div\", {\n    key: key,\n    className: \"contact__stepblock\"\n  }, key === 3 ? __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `bewerbung_${item}`\n  }, item, __jsx(\"input\", {\n    className: \"input__text\",\n    type: \"text\",\n    id: `bewerbung_${item.toLowerCase()}`,\n    name: `bewerbung_${item.toLowerCase()}`\n  })) : __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `bewerbung_${item}`\n  }, `${item}*`, __jsx(\"input\", {\n    ref: register({\n      required: true,\n      maxlength: 20,\n      pattern: /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n    }),\n    className: \"input__text\",\n    type: \"text\",\n    id: `bewerbung_${item.toLowerCase()}`,\n    name: `bewerbung_${item.toLowerCase()}`\n  })))), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"job_position\",\n    className: \"label__select\"\n  }, formFields.bewerbung_frage_1), __jsx(\"select\", {\n    name: \"job_position\",\n    ref: register\n  }, __jsx(\"optgroup\", null, data.fields.karriere_eintrage.map((item, key) => __jsx(\"option\", {\n    key: key,\n    value: item.info.titel\n  }, item.info.titel, \", \", item.info.standort))))), __jsx(\"div\", {\n    className: \"contact__stepblock uploadcv\"\n  }, __jsx(\"div\", getRootProps(), __jsx(\"input\", _extends({\n    name: \"uploadedfile\",\n    ref: register\n  }, getInputProps())), __jsx(\"span\", null, uploadTextParts[0]), __jsx(\"span\", null, uploadTextParts[1]), __jsx(\"span\", null, `${uploadTextParts[2]} ${uploadTextParts[3]}`))), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"job_status\",\n    className: \"contact__stepblock--inner\"\n  }, formFields.bewerbung_frage_2.frage), formFields.bewerbung_frage_2.job_status.map((item, key) => __jsx(\"p\", {\n    className: \"contact__stepblock--inner contact__stepblock--career\",\n    key: key\n  }, __jsx(\"input\", {\n    ref: register,\n    className: \"input__radio\",\n    type: \"radio\",\n    name: \"job_status\",\n    value: item.status\n  }), __jsx(\"span\", {\n    className: \"label__radio\"\n  }, item.status)))), __jsx(\"div\", {\n    className: \"contact__stepblock contact__stepblock--date\"\n  }, __jsx(\"label\", {\n    className: \"contact__stepblock--inner\",\n    htmlFor: \"job_start_date\"\n  }, formFields.bewerbung_zeit), __jsx(DatePicker, {\n    selected: jobStartDate,\n    onChange: date => setJobStartDate(date)\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"job_message\"\n  }, formFields.bewerbung_nachricht), __jsx(\"textarea\", {\n    ref: register,\n    name: \"job_message\",\n    id: \"job_message\",\n    cols: \"30\",\n    rows: \"5\"\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock career__submitwrapper\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"golden__button\"\n  }, formFields.bewerbung_button)))));\n});","map":null,"metadata":{},"sourceType":"module"}