{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/home/urbandruid/repos/goldendoor-next/components/DragNDrop.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDropzone } from 'react-dropzone';\n\nconst DragNDrop = ({\n  text,\n  messages\n}) => {\n  const onDrop = React.useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(messages[1].text);\n\n      reader.onerror = () => console.log(messages[1].text);\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n  const textParts = text.split(' ');\n  return __jsx(\"div\", _extends({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, textParts[0]), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, textParts[1]), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, `${textParts[2]} ${textParts[3]}`));\n};\n\nexport default DragNDrop;","map":{"version":3,"sources":["/home/urbandruid/repos/goldendoor-next/components/DragNDrop.js"],"names":["useDropzone","DragNDrop","text","messages","onDrop","React","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsArrayBuffer","getRootProps","getInputProps","textParts","split"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AAEzC,QAAMC,MAAM,GAAGC,KAAK,CAACC,WAAN,CAAmBC,aAAD,IAAmB;AACnDA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC/B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAAC,CAAD,CAAR,CAAYD,IAAxB,CAAvB;;AACAQ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAAC,CAAD,CAAR,CAAYD,IAAxB,CAAvB;;AACAQ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACrB;AACA,cAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAzB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,OAJD;;AAKAP,MAAAA,MAAM,CAACS,iBAAP,CAAyBV,IAAzB;AACA,KAXD;AAaA,GAdc,EAcZ,EAdY,CAAf;AAgBA,QAAM;AAAEW,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCrB,WAAW,CAAC;AAAEI,IAAAA;AAAF,GAAD,CAAnD;AACA,QAAMkB,SAAS,GAAGpB,IAAI,CAACqB,KAAL,CAAW,GAAX,CAAlB;AAEA,SACC,0BAASH,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACC,4BAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,SAAS,CAAC,CAAD,CAAhB,CAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,SAAS,CAAC,CAAD,CAAhB,CAHD,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQ,GAAEA,SAAS,CAAC,CAAD,CAAI,IAAGA,SAAS,CAAC,CAAD,CAAI,EAAvC,CAJD,CADD;AAQA,CA7BD;;AA+BA,eAAerB,SAAf","sourcesContent":["import { useDropzone } from 'react-dropzone'\n\nconst DragNDrop = ({ text, messages }) => {\n\n\tconst onDrop = React.useCallback((acceptedFiles) => {\n\t\tacceptedFiles.forEach((file) => {\n\t\t\tconst reader = new FileReader()\n\n\t\t\treader.onabort = () => console.log(messages[1].text)\n\t\t\treader.onerror = () => console.log(messages[1].text)\n\t\t\treader.onload = () => {\n\t\t\t\t// Do whatever you want with the file contents\n\t\t\t\tconst binaryStr = reader.result\n\t\t\t\tconsole.log(binaryStr)\n\t\t\t}\n\t\t\treader.readAsArrayBuffer(file)\n\t\t})\n\n\t}, [])\n\t\n\tconst { getRootProps, getInputProps } = useDropzone({ onDrop })\n\tconst textParts = text.split(' ');\n\n\treturn (\n\t\t<div {...getRootProps()}>\n\t\t\t<input {...getInputProps()} />\n\t\t\t<span>{textParts[0]}</span>\n\t\t\t<span>{textParts[1]}</span>\n\t\t\t<span>{`${textParts[2]} ${textParts[3]}`}</span>\n\t\t</div>\n\t)\n}\n\nexport default DragNDrop;"]},"metadata":{},"sourceType":"module"}