{"ast":null,"code":"var _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  pool: true,\n  host: \"smtprelaypool.ispgateway.de\",\n  port: 465,\n  secure: true,\n  // use TLS\n  auth: {\n    user: 'f.gozenc@narciss-taurus.de',\n    pass: '1rk3n84L>h8c'\n  }\n});\n\nconst send = props => {\n  const name = props.contactType == 'contactForm' ? props.kontakt_name + \" \" + props.kontakt_surname : props.name + ' ' + props.surname;\n  const email = props.contactType == 'contactForm' ? props.kontakt_email : props.email;\n  const text = props.contactType == 'contactForm' ? `\n    \\r\\nKontaktdaten\\r\\n\n    Anrede: ${props.kontakt_anrede}\\r\\n\n    Vorname: ${props.kontakt_name}\\r\\n\n    Nachname: ${props.kontakt_surname}\\r\\n\n    E-Mail: ${props.kontakt_email}\\r\\n\n    Telefon: ${props.kontakt_phone}\\r\\n\n    Firma: ${props.kontakt_company}\\r\\n\n    Nachricht: ${props.event_nachricht}\\r\\n\n    \\r\\nEventinformationen\\r\\n\n    Art der Veranstaltung: ${props.event_type}\\r\\n\n    Location Auswahl: ${props.event_location}\\r\\n\n    Konkretes Datum?: ${props.event_date_answer}\\r\\n\n    Zeitraum (Wenn es kein konkretes Datum gibt): ${props.date_range}\\r\\n\n    Event Datum (Wenn es ein konkretes Datum gibt): ${props.eventdatum}\\r\\n\n    Event Ausweichtermin (Wenn es ein konkretes Datum gibt): ${props.ausweichtermin}\\r\\n\n    Event Beginn Zeit (Wenn es ein konkretes Datum gibt): ${props.eventzeitbeginn}\\r\\n\n    Event Ende Zeit (Wenn es ein konkretes Datum gibt): ${props.eventzeitend}\\r\\n\n    \\r\\nZusatzinformationen\\r\\n\n    Anzahl der Personen: ${props.personenzahl}\\r\\n\n    Maximal Budget?: ${props.event_max_budget}\\r\\n\n    \\r\\nGewünschte dienstleistungen\\r\\n\n    Speisenauswahl: ${props.lang === 'de' ? props.event_speisen : props.event_food}\\r\\n\n    Mobiliarauswahl: ${props.lang === 'de' ? props.event_mobiliar : props.event_furnishings}\\r\\n\n    Technikauswahl: ${props.lang === 'de' ? props.event_technik : props.event_technique}\\r\\n\n    Dekoauswahl: ${props.lang === 'de' ? props.event_deko : props.event_decoration}\\r\\n\n    Musikauswahl: ${props.lang === 'de' ? props.event_musik : props.event_music}\\r\\n\n  ` : `\n    \\r\\nKarriere Bewerbung\\r\\n\n    Vorname: ${props.name}\\r\\n\n    Nachname: ${props.surname}\\r\\n\n    E-Mail: ${props.email}\\r\\n\n    Berufliche Stellung: ${props.position}\\r\\n\n    Aktueller Jobsstatus: ${props.jobstatus}\\r\\n\n    Mögliches Start-Datum: ${props.startdate}\\r\\n\n    Nachricht: ${props.message}\\r\\n\n  `;\n  const sender = `${name} <${email}>`;\n  const message = {\n    from: 'f.gozenc@narciss-taurus.de',\n    to: 'f.gozenc@narciss-taurus.de',\n    subject: `Neu Nachricht von ${sender}`,\n    text,\n    replyTo: sender\n  };\n  return new _Promise((resolve, reject) => {\n    transporter.sendMail(message, (error, info) => error ? reject(error) : resolve(info));\n  });\n};\n\nmodule.exports = send;","map":{"version":3,"sources":["/Users/fatih/repos/goldendoor-next/kontaktMailer.js"],"names":["nodemailer","require","transporter","createTransport","pool","host","port","secure","auth","user","pass","send","props","name","contactType","kontakt_name","kontakt_surname","surname","email","kontakt_email","text","kontakt_anrede","kontakt_phone","kontakt_company","event_nachricht","event_type","event_location","event_date_answer","date_range","eventdatum","ausweichtermin","eventzeitbeginn","eventzeitend","personenzahl","event_max_budget","lang","event_speisen","event_food","event_mobiliar","event_furnishings","event_technik","event_technique","event_deko","event_decoration","event_musik","event_music","position","jobstatus","startdate","message","sender","from","to","subject","replyTo","resolve","reject","sendMail","error","info","module","exports"],"mappings":"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","sourcesContent":["const nodemailer = require('nodemailer')\n\nconst transporter = nodemailer.createTransport({\n  pool: true,\n  host: \"smtprelaypool.ispgateway.de\",\n  port: 465,\n  secure: true, // use TLS\n  auth: {\n    user: 'f.gozenc@narciss-taurus.de',\n    pass: '1rk3n84L>h8c'\n  }\n});\n\nconst send = (props) => {\n  const name = props.contactType == 'contactForm' ? (props.kontakt_name + \" \" + props.kontakt_surname) : props.name + ' ' + props.surname;\n  const email = props.contactType == 'contactForm' ? props.kontakt_email : props.email;\n  const text = props.contactType == 'contactForm' ? (`\n    \\r\\nKontaktdaten\\r\\n\n    Anrede: ${props.kontakt_anrede}\\r\\n\n    Vorname: ${props.kontakt_name}\\r\\n\n    Nachname: ${props.kontakt_surname}\\r\\n\n    E-Mail: ${props.kontakt_email}\\r\\n\n    Telefon: ${props.kontakt_phone}\\r\\n\n    Firma: ${props.kontakt_company}\\r\\n\n    Nachricht: ${props.event_nachricht}\\r\\n\n    \\r\\nEventinformationen\\r\\n\n    Art der Veranstaltung: ${props.event_type}\\r\\n\n    Location Auswahl: ${props.event_location}\\r\\n\n    Konkretes Datum?: ${props.event_date_answer}\\r\\n\n    Zeitraum (Wenn es kein konkretes Datum gibt): ${props.date_range}\\r\\n\n    Event Datum (Wenn es ein konkretes Datum gibt): ${props.eventdatum}\\r\\n\n    Event Ausweichtermin (Wenn es ein konkretes Datum gibt): ${props.ausweichtermin}\\r\\n\n    Event Beginn Zeit (Wenn es ein konkretes Datum gibt): ${props.eventzeitbeginn}\\r\\n\n    Event Ende Zeit (Wenn es ein konkretes Datum gibt): ${props.eventzeitend}\\r\\n\n    \\r\\nZusatzinformationen\\r\\n\n    Anzahl der Personen: ${props.personenzahl}\\r\\n\n    Maximal Budget?: ${props.event_max_budget}\\r\\n\n    \\r\\nGewünschte dienstleistungen\\r\\n\n    Speisenauswahl: ${props.lang === 'de' ? props.event_speisen : props.event_food}\\r\\n\n    Mobiliarauswahl: ${props.lang === 'de' ? props.event_mobiliar : props.event_furnishings}\\r\\n\n    Technikauswahl: ${props.lang === 'de' ? props.event_technik : props.event_technique}\\r\\n\n    Dekoauswahl: ${props.lang === 'de' ? props.event_deko : props.event_decoration}\\r\\n\n    Musikauswahl: ${props.lang === 'de' ? props.event_musik : props.event_music}\\r\\n\n  `) : ( `\n    \\r\\nKarriere Bewerbung\\r\\n\n    Vorname: ${props.name}\\r\\n\n    Nachname: ${props.surname}\\r\\n\n    E-Mail: ${props.email}\\r\\n\n    Berufliche Stellung: ${props.position}\\r\\n\n    Aktueller Jobsstatus: ${props.jobstatus}\\r\\n\n    Mögliches Start-Datum: ${props.startdate}\\r\\n\n    Nachricht: ${props.message}\\r\\n\n  `\n  );\n  const sender = `${name} <${email}>`;\n  const message = {\n    from: 'f.gozenc@narciss-taurus.de',\n    to: 'f.gozenc@narciss-taurus.de',\n    subject: `Neu Nachricht von ${sender}`,\n    text,\n    replyTo: sender\n  }\n\n  return new Promise((resolve, reject) => {\n    transporter.sendMail(message, (error, info) =>\n      error ? reject(error) : resolve(info)\n    )\n  })\n}\n\nmodule.exports = send"]},"metadata":{},"sourceType":"script"}