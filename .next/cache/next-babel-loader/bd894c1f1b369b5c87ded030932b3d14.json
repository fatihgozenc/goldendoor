{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport parse from 'html-react-parser';\nimport DatePicker from 'react-datepicker';\nimport { useForm } from 'react-hook-form';\nimport { NextSeo } from 'next-seo';\nimport { useDropzone } from 'react-dropzone';\nimport Breadcrumb from '../../Breadcrumb';\nimport serialize from 'serialize-javascript';\nimport Icon from '../../Icon';\nimport './style.scss';\nexport default (function (_ref) {\n  var data = _ref.data,\n      language = _ref.language;\n  var formFields = data.fields.karriere_bewerbung;\n\n  var _React$useState = React.useState(new Date()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      jobStartDate = _React$useState2[0],\n      setJobStartDate = _React$useState2[1];\n\n  var collapseBlock = function collapseBlock(el) {\n    var sectionHeight = el.scrollHeight;\n    var elTransition = el.style.transition;\n    el.style.transition = '';\n    requestAnimationFrame(function () {\n      el.style.height = sectionHeight + 'px';\n      el.style.transition = elTransition;\n      requestAnimationFrame(function () {\n        el.style.height = 6 + 'rem';\n      });\n    });\n  };\n\n  var expandBlock = function expandBlock(el) {\n    var sectionHeight = el.scrollHeight;\n    el.style.height = sectionHeight + 'px';\n\n    var trigger = function trigger(el) {\n      el.addEventListener('transitionend', function (e) {\n        el.removeEventListener('transitionend', trigger);\n        el.style.height = null;\n      });\n    };\n  };\n\n  var openBlock = function openBlock(e) {\n    var entryContainer = e.currentTarget.parentElement.parentElement;\n    var isCollapsed = entryContainer.getAttribute('data-collapsed') === 'true';\n    console.log(isCollapsed);\n\n    if (isCollapsed) {\n      collapseBlock(entryContainer);\n      entryContainer.setAttribute('data-collapsed', 'false');\n    } else {\n      expandBlock(entryContainer);\n      entryContainer.setAttribute('data-collapsed', 'true');\n    }\n\n    console.log(e.currentTarget);\n    e.currentTarget.firstElementChild.classList.toggle('rotateSymbol');\n  };\n\n  var uploadText = formFields.bewerbung_hochladen;\n  var uploadMessages = formFields.formnachrichten;\n\n  var _React$useState3 = React.useState({\n    file: '',\n    buffer: {}\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      uploadedFile = _React$useState4[0],\n      setUploadedFile = _React$useState4[1];\n\n  var onDrop = React.useCallback(function (acceptedFiles) {\n    acceptedFiles.forEach(function (file) {\n      var reader = new FileReader();\n\n      reader.onabort = function () {\n        return console.log(uploadMessages[1].text);\n      };\n\n      reader.onerror = function () {\n        return console.log(uploadMessages[1].text);\n      };\n\n      reader.onload = function () {\n        // Do whatever you want with the file contents\n        var binaryStr = reader.result;\n        setUploadedFile({\n          buffer: binaryStr\n        });\n      };\n\n      reader.readAsArrayBuffer(file);\n      console.log(file);\n      setUploadedFile({\n        file: file\n      });\n    });\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  var uploadTextParts = uploadText.split(' ');\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      submitted = _React$useState6[0],\n      setSubmitted = _React$useState6[1];\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  var onSubmit = function onSubmit(data) {\n    var formData = {\n      lang: language,\n      contactType: \"jobApplication\",\n      name: language === 'de' ? data.bewerbung_vorname : data.bewerbung_name,\n      surname: language === 'de' ? data.bewerbung_name : data.bewerbung_surname,\n      email: data.bewerbung_email,\n      position: data.job_position,\n      jobstatus: data.job_status,\n      startdate: jobStartDate.toDateString(),\n      message: data.job_message,\n      attachment: uploadedFile\n    };\n    fetch('/api/kontakt', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        'Content-Disposition': 'attachment'\n      },\n      body: serialize(formData)\n    }).then(function (res) {\n      res.status === 200 ? setSubmitted(!submitted) : '';\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(NextSeo, {\n    title: data.fields.seo.title,\n    description: data.fields.seo.description\n  }), __jsx(\"div\", {\n    className: \"page__title page__title--contact\"\n  }, __jsx(Breadcrumb, {\n    slug: data.slug,\n    title: data.title\n  }), __jsx(\"h1\", null, data.title)), __jsx(\"div\", {\n    className: \"career\"\n  }, data.fields.karriere_eintrage.map(function (item, key) {\n    return __jsx(\"div\", {\n      key: key,\n      className: \"career__entry--wrapper\"\n    }, __jsx(\"div\", {\n      className: \"career__entry\",\n      \"data-collapsed\": \"false\"\n    }, __jsx(\"div\", {\n      className: \"career__entry--block career__entry--util\"\n    }, item.info.arbeitszeit), __jsx(\"div\", {\n      className: \"career__entry--block career__entry--info\"\n    }, __jsx(\"h3\", null, item.info.titel), parse(item.beschreibung), __jsx(\"a\", {\n      href: \"#bewerbung\",\n      className: \"golden__button button--bewerbung\"\n    }, formFields.bewerbung_button)), __jsx(\"div\", {\n      className: \"career__entry--block career__entry--util\"\n    }, item.info.standort), __jsx(\"div\", {\n      className: \"career__entry--block\"\n    }, __jsx(\"a\", {\n      href: \"#job-\".concat(key),\n      onClick: function onClick(e) {\n        return openBlock(e);\n      }\n    }, __jsx(Icon, {\n      type: \"plus\"\n    })))));\n  })), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    id: \"bewerbung\",\n    className: \"career__application\"\n  }, __jsx(\"h2\", null, formFields.bewerbung_titel), __jsx(\"div\", {\n    className: \"contact__step--flexWrapper\"\n  }, _Object$values(formFields.bewerbung_etiketten).map(function (item, key) {\n    return __jsx(\"div\", {\n      key: key,\n      className: \"contact__stepblock\"\n    }, key === 3 ? __jsx(\"label\", {\n      className: \"label__text\",\n      htmlFor: \"bewerbung_\".concat(item)\n    }, item, __jsx(\"input\", {\n      className: \"input__text\",\n      type: \"text\",\n      id: \"bewerbung_\".concat(item.toLowerCase()),\n      name: \"bewerbung_\".concat(item.toLowerCase())\n    })) : __jsx(\"label\", {\n      className: \"label__text\",\n      htmlFor: \"bewerbung_\".concat(item)\n    }, \"\".concat(item, \"*\"), __jsx(\"input\", {\n      ref: register({\n        required: true,\n        maxlength: 20,\n        pattern: /^[ ',-\\.A-Za-z\\xC0-\\xCF\\xD1-\\xD6\\xD8-\\xDD\\xDF-\\xE5\\xE7-\\xF6\\xF8-\\xFD\\xFF\\u0104-\\u0107\\u010C\\u010D\\u0116-\\u0119\\u012E\\u012F\\u0141-\\u0144\\u0152\\u0160\\u0161\\u016A\\u016B\\u0172\\u0173\\u0178-\\u017E\\u2202]+$/\n      }),\n      className: \"input__text\",\n      type: \"text\",\n      id: \"bewerbung_\".concat(item.toLowerCase()),\n      name: \"bewerbung_\".concat(item.toLowerCase())\n    })));\n  }), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"job_position\",\n    className: \"label__select\"\n  }, formFields.bewerbung_frage_1), __jsx(\"select\", {\n    name: \"job_position\",\n    ref: register\n  }, __jsx(\"optgroup\", null, data.fields.karriere_eintrage.map(function (item, key) {\n    return __jsx(\"option\", {\n      key: key,\n      value: item.info.titel\n    }, item.info.titel, \", \", item.info.standort);\n  })))), __jsx(\"div\", {\n    className: \"contact__stepblock uploadcv\"\n  }, __jsx(\"div\", getRootProps(), __jsx(\"input\", _extends({\n    name: \"uploadedfile\",\n    ref: register\n  }, getInputProps())), __jsx(\"span\", null, uploadTextParts[0]), __jsx(\"span\", null, uploadTextParts[1]), __jsx(\"span\", null, \"\".concat(uploadTextParts[2], \" \").concat(uploadTextParts[3])))), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"job_status\",\n    className: \"contact__stepblock--inner\"\n  }, formFields.bewerbung_frage_2.frage), formFields.bewerbung_frage_2.job_status.map(function (item, key) {\n    return __jsx(\"p\", {\n      className: \"contact__stepblock--inner contact__stepblock--career\",\n      key: key\n    }, __jsx(\"input\", {\n      ref: register,\n      className: \"input__radio\",\n      type: \"radio\",\n      name: \"job_status\",\n      value: item.status\n    }), __jsx(\"span\", {\n      className: \"label__radio\"\n    }, item.status));\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock contact__stepblock--date\"\n  }, __jsx(\"label\", {\n    className: \"contact__stepblock--inner\",\n    htmlFor: \"job_start_date\"\n  }, formFields.bewerbung_zeit), __jsx(DatePicker, {\n    selected: jobStartDate,\n    onChange: function onChange(date) {\n      return setJobStartDate(date);\n    }\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"job_message\"\n  }, formFields.bewerbung_nachricht), __jsx(\"textarea\", {\n    ref: register,\n    name: \"job_message\",\n    id: \"job_message\",\n    cols: \"30\",\n    rows: \"5\"\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock career__submitwrapper\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"golden__button\"\n  }, formFields.bewerbung_button)))));\n});","map":null,"metadata":{},"sourceType":"module"}