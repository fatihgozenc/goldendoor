{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport App from 'next/app';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/layout/Layout';\nimport { API_HOST } from '../config';\n\nfunction GoldenDoor({\n  Component,\n  pageProps,\n  layoutData,\n  pathname\n}) {\n  return __jsx(Layout, {\n    data: layoutData,\n    pathname: pathname\n  }, __jsx(Component, pageProps));\n}\n\nGoldenDoor.getInitialProps = async appContext => {\n  const pathname = appContext.ctx.asPath;\n  const lang = appContext.ctx.asPath.split('/')[1] === 'en' ? 'en' : 'de';\n  const response = await fetch(`${API_HOST}${lang}/layout`);\n  const data = await response.json();\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread({}, appProps, {\n    layoutData: data,\n    pathname\n  });\n};\n\nexport default GoldenDoor;","map":null,"metadata":{},"sourceType":"module"}