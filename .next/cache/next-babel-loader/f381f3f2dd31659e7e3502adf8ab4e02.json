{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport parse from 'html-react-parser';\nimport { useForm } from \"react-hook-form\";\nimport SendingQuery from '../SendingQuery';\n\nconst Newsletter = ({\n  data\n}) => {\n  const [accessToken, setAccessToken] = React.useState('');\n  const n2goHeaders = new Headers();\n  n2goHeaders.append(\"Content-Type\", \"application/json\");\n  n2goHeaders.append(\"Authorization\", \"Basic \" + Buffer.from(process.env.NEWSLETTER_API_KEY).toString('base64'));\n\n  const n2goBody = _JSON$stringify({\n    \"username\": process.env.NEWSLETTER_USER,\n    \"password\": process.env.NEWSLETTER_PASS,\n    \"grant_type\": \"https://nl2go.com/jwt\"\n  });\n\n  const requestOpts = {\n    method: 'POST',\n    headers: n2goHeaders,\n    body: n2goBody,\n    redirect: 'follow'\n  };\n\n  const connectToNewsletter = () => {\n    fetch(`${process.env.NEWSLETTER_API_HOST}/oauth/v2/token`, requestOpts).then(response => response.json()).then(result => {\n      setAccessToken(result.access_token);\n      localStorage.setItem('newsletter', result.access_token);\n    }).catch(error => console.log('error', error));\n  };\n\n  React.useEffect(() => {\n    // localStorage.getItem('newsletter') === null &&\n    connectToNewsletter();\n  }, []);\n  const [registerResponse, setRegisterResponse] = React.useState({});\n  const newsletterForm = React.useRef();\n\n  const registerNewsletterUser = (name, surname, email, gender, token) => {\n    const n2goRegisterHeaders = new Headers();\n    n2goRegisterHeaders.append(\"Content-Type\", \"application/json\");\n    n2goRegisterHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n    const n2goRegisterBody = _JSON$stringify({\n      \"list_id\": \"r9s81zk7\",\n      \"email\": email,\n      \"gender\": gender === 'Herr' || 'Mr.' ? 'm' : 'f',\n      \"first_name\": name,\n      \"last_name\": surname,\n      \"is_unsubscribed\": false,\n      \"is_blacklisted\": false\n    });\n\n    const registerRequestOpts = {\n      method: 'POST',\n      headers: n2goRegisterHeaders,\n      body: n2goRegisterBody,\n      redirect: 'follow'\n    };\n    fetch(`${process.env.NEWSLETTER_API_HOST}/recipients`, registerRequestOpts).then(response => response.text()).then(result => {\n      setRegisterResponse(JSON.parse(result));\n    }).catch(error => console.log('error', error));\n  };\n\n  React.useEffect(() => {\n    newsletterForm.current.classList.add('newsletterHide');\n  }, [registerResponse, setRegisterResponse]);\n  const {\n    handleSubmit,\n    register,\n    errors\n  } = useForm();\n\n  const onSubmit = values => {\n    registerNewsletterUser(values.vorname, values.name, values.email, values.anrede, accessToken);\n  };\n\n  return __jsx(\"div\", {\n    id: \"newsletter\",\n    className: \"newsletter\"\n  }, __jsx(\"div\", {\n    className: \"newsletter__block\"\n  }, __jsx(\"h3\", null, \"Newsletter\"), __jsx(\"p\", null, data.subtitel)), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    ref: newsletterForm,\n    className: \"newsletter__form\"\n  }, __jsx(\"div\", {\n    className: \"newsletter__form--block\"\n  }, __jsx(\"div\", {\n    className: \"newsletter__form--field\"\n  }, __jsx(\"label\", {\n    htmlFor: \"vorname\"\n  }, data.vorname), __jsx(\"input\", {\n    name: \"vorname\",\n    ref: register({\n      pattern: /^[A-Za-z]+$/i,\n      validate: value => value !== \"admin\" || \"Nice try!\"\n    })\n  }), errors.vorname && errors.vorname.message), __jsx(\"div\", {\n    className: \"newsletter__form--field\"\n  }, __jsx(\"label\", {\n    htmlFor: \"name\"\n  }, data.name), __jsx(\"input\", {\n    name: \"name\",\n    ref: register({\n      pattern: /^[A-Za-z]+$/i,\n      validate: value => value !== \"admin\" || \"Nice try!\"\n    })\n  }), errors.name && errors.name.message)), __jsx(\"div\", {\n    className: \"newsletter__form--block\"\n  }, __jsx(\"div\", {\n    className: \"newsletter__form--field\"\n  }, __jsx(\"label\", {\n    htmlFor: \"anrede\"\n  }, data.anrede.value), __jsx(\"select\", {\n    name: \"anrede\",\n    ref: register\n  }, __jsx(\"optgroup\", null, __jsx(\"option\", {\n    value: data.anrede.herr\n  }, data.anrede.herr), __jsx(\"option\", {\n    value: data.anrede.frau\n  }, data.anrede.frau))), errors.anrede && errors.anrede.message), __jsx(\"div\", {\n    className: \"newsletter__form--field\"\n  }, __jsx(\"label\", {\n    htmlFor: \"email\"\n  }, data.email), __jsx(\"input\", {\n    name: \"email\",\n    ref: register({\n      required: data.fehlerfelder.required,\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: data.fehlerfelder.invalid\n      }\n    })\n  }), errors.email && errors.email.message)), __jsx(\"div\", {\n    className: \"newsletter__datenschutz\"\n  }, parse(data.datenschutz.text), __jsx(\"input\", {\n    className: \"input__radio\",\n    type: \"checkbox\",\n    required: true,\n    name: \"acceptance\"\n  }), __jsx(\"label\", {\n    className: \"label__radio\",\n    htmlFor: \"acceptance\"\n  }, data.datenschutz.checkbox), parse(data.datenschutz.extra)), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"golden__button\"\n  }, data.datenschutz.button)), registerResponse.status === 200 && __jsx(SendingQuery, {\n    color: \"#C2AC84\",\n    message: `Danke f√ºr die Registrierung.`\n  }));\n};\n\nexport default Newsletter;","map":{"version":3,"sources":["/Users/fatih/repos/goldendoor-next/components/layout/Newsletter.js"],"names":["parse","useForm","SendingQuery","Newsletter","data","accessToken","setAccessToken","React","useState","n2goHeaders","Headers","append","Buffer","from","process","env","NEWSLETTER_API_KEY","toString","n2goBody","NEWSLETTER_USER","NEWSLETTER_PASS","requestOpts","method","headers","body","redirect","connectToNewsletter","fetch","NEWSLETTER_API_HOST","then","response","json","result","access_token","localStorage","setItem","catch","error","console","log","useEffect","registerResponse","setRegisterResponse","newsletterForm","useRef","registerNewsletterUser","name","surname","email","gender","token","n2goRegisterHeaders","n2goRegisterBody","registerRequestOpts","text","JSON","current","classList","add","handleSubmit","register","errors","onSubmit","values","vorname","anrede","subtitel","pattern","validate","value","message","herr","frau","required","fehlerfelder","invalid","datenschutz","checkbox","extra","button","status"],"mappings":"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","sourcesContent":["import parse from 'html-react-parser';\nimport { useForm } from \"react-hook-form\";\nimport SendingQuery from '../SendingQuery';\n\nconst Newsletter = ({ data }) => {\n\n\tconst [accessToken, setAccessToken] = React.useState('');\n\n\tconst n2goHeaders = new Headers();\n\tn2goHeaders.append(\"Content-Type\", \"application/json\");\n\tn2goHeaders.append(\"Authorization\", \"Basic \" + Buffer.from(process.env.NEWSLETTER_API_KEY).toString('base64'));\n\n\tconst n2goBody = JSON.stringify({\n\t\t\"username\": process.env.NEWSLETTER_USER,\n\t\t\"password\": process.env.NEWSLETTER_PASS,\n\t\t\"grant_type\": \"https://nl2go.com/jwt\"\n\t});\n\n\tconst requestOpts = {\n\t\tmethod: 'POST',\n\t\theaders: n2goHeaders,\n\t\tbody: n2goBody,\n\t\tredirect: 'follow'\n\t};\n\n\tconst connectToNewsletter = () => {\n\t\tfetch(`${process.env.NEWSLETTER_API_HOST}/oauth/v2/token`, requestOpts)\n\t\t\t.then(response => response.json())\n\t\t\t.then(result => {\n\t\t\t\tsetAccessToken(result.access_token)\n\t\t\t\tlocalStorage.setItem('newsletter', result.access_token)\n\t\t\t})\n\t\t\t.catch(error => console.log('error', error));\n\t}\n\n\tReact.useEffect(() => {\n\t\t// localStorage.getItem('newsletter') === null &&\n\t\t\tconnectToNewsletter();\n\t}, [])\n\n\tconst [registerResponse, setRegisterResponse] = React.useState({});\n\tconst newsletterForm = React.useRef();\n\n\tconst registerNewsletterUser = (name, surname, email, gender, token) => {\n\t\tconst n2goRegisterHeaders = new Headers();\n\t\tn2goRegisterHeaders.append(\"Content-Type\", \"application/json\");\n\t\tn2goRegisterHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n\t\tconst n2goRegisterBody = JSON.stringify({\n\t\t\t\"list_id\": \"r9s81zk7\",\n\t\t\t\"email\": email,\n\t\t\t\"gender\": gender === 'Herr' || 'Mr.' ? 'm' : 'f',\n\t\t\t\"first_name\": name,\n\t\t\t\"last_name\": surname,\n\t\t\t\"is_unsubscribed\": false,\n\t\t\t\"is_blacklisted\": false,\n\t\t});\n\n\t\tconst registerRequestOpts = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: n2goRegisterHeaders,\n\t\t\tbody: n2goRegisterBody,\n\t\t\tredirect: 'follow'\n\t\t};\n\n\t\tfetch(`${process.env.NEWSLETTER_API_HOST}/recipients`, registerRequestOpts)\n\t\t\t.then(response => response.text())\n\t\t\t.then(result => {\n\t\t\t\tsetRegisterResponse(JSON.parse(result))\n\t\t\t})\n\t\t\t.catch(error => console.log('error', error));\n\t}\n\n\tReact.useEffect(() => {\n\t\tnewsletterForm.current.classList.add('newsletterHide');\n\t}, [registerResponse, setRegisterResponse])\n\n\tconst { handleSubmit, register, errors } = useForm();\n\tconst onSubmit = values => {\n\t\tregisterNewsletterUser(values.vorname, values.name, values.email, values.anrede, accessToken);\n\t};\n\n\treturn (\n\t\t<div id=\"newsletter\" className=\"newsletter\">\n\n\t\t\t<div className=\"newsletter__block\">\n\t\t\t\t<h3>Newsletter</h3>\n\t\t\t\t<p>{data.subtitel}</p>\n\t\t\t</div>\n\n\t\t\t<form onSubmit={handleSubmit(onSubmit)} ref={newsletterForm} className=\"newsletter__form\">\n\n\t\t\t\t<div className=\"newsletter__form--block\">\n\n\t\t\t\t\t<div className=\"newsletter__form--field\">\n\t\t\t\t\t\t<label htmlFor=\"vorname\">{data.vorname}</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"vorname\"\n\t\t\t\t\t\t\tref={register({\n\t\t\t\t\t\t\t\tpattern: /^[A-Za-z]+$/i,\n\t\t\t\t\t\t\t\tvalidate: value => value !== \"admin\" || \"Nice try!\"\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.vorname && errors.vorname.message}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"newsletter__form--field\">\n\t\t\t\t\t\t<label htmlFor=\"name\">{data.name}</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\tref={register({\n\t\t\t\t\t\t\t\tpattern: /^[A-Za-z]+$/i,\n\t\t\t\t\t\t\t\tvalidate: value => value !== \"admin\" || \"Nice try!\"\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.name && errors.name.message}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"newsletter__form--block\">\n\n\t\t\t\t\t<div className=\"newsletter__form--field\">\n\t\t\t\t\t\t<label htmlFor=\"anrede\">{data.anrede.value}</label>\n\t\t\t\t\t\t<select name=\"anrede\" ref={register}>\n\t\t\t\t\t\t\t<optgroup>\n\t\t\t\t\t\t\t\t<option value={data.anrede.herr}>{data.anrede.herr}</option>\n\t\t\t\t\t\t\t\t<option value={data.anrede.frau}>{data.anrede.frau}</option>\n\t\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t{errors.anrede && errors.anrede.message}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"newsletter__form--field\">\n\t\t\t\t\t\t<label htmlFor=\"email\">{data.email}</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\tref={register({\n\t\t\t\t\t\t\t\trequired: data.fehlerfelder.required,\n\t\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t\tvalue: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n\t\t\t\t\t\t\t\t\tmessage: data.fehlerfelder.invalid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.email && errors.email.message}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"newsletter__datenschutz\">\n\t\t\t\t\t{parse(data.datenschutz.text)}\n\t\t\t\t\t<input className=\"input__radio\" type=\"checkbox\" required name=\"acceptance\" />\n\t\t\t\t\t<label className=\"label__radio\" htmlFor=\"acceptance\">{data.datenschutz.checkbox}</label>\n\t\t\t\t\t{parse(data.datenschutz.extra)}\n\t\t\t\t</div>\n\n\t\t\t\t<button type=\"submit\" className=\"golden__button\">{data.datenschutz.button}</button>\n\n\t\t\t</form>\n\n\t\t\t{\n\t\t\t\tregisterResponse.status === 200 &&\n\t\t\t\t <SendingQuery color=\"#C2AC84\" message={`Danke f√ºr die Registrierung.`} />\n\t\t\t}\n\n\t\t</div>\n\t)\n};\n\nexport default Newsletter;"]},"metadata":{},"sourceType":"module"}