{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/home/urbandruid/repos/goldendoor-next/components/DragNDrop.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDropzone } from 'react-dropzone';\n\nvar DragNDrop = function DragNDrop(_ref) {\n  var text = _ref.text,\n      messages = _ref.messages;\n  var onDrop = React.useCallback(function (acceptedFiles) {\n    acceptedFiles.forEach(function (file) {\n      var reader = new FileReader();\n\n      reader.onabort = function () {\n        return console.log(messages[1].text);\n      };\n\n      reader.onerror = function () {\n        return console.log(messages[1].text);\n      };\n\n      reader.onload = function () {\n        // Do whatever you want with the file contents\n        var binaryStr = reader.result;\n        console.log(binaryStr);\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  var textParts = text.split(' ');\n  return __jsx(\"div\", _extends({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, textParts[0]), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, textParts[1]), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"\".concat(textParts[2], \" \").concat(textParts[3])));\n};\n\nexport default DragNDrop;","map":{"version":3,"sources":["/home/urbandruid/repos/goldendoor-next/components/DragNDrop.js"],"names":["useDropzone","DragNDrop","text","messages","onDrop","React","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsArrayBuffer","getRootProps","getInputProps","textParts","split"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,gBAA5B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAEzC,MAAMC,MAAM,GAAGC,KAAK,CAACC,WAAN,CAAkB,UAACC,aAAD,EAAmB;AACnDA,IAAAA,aAAa,CAACC,OAAd,CAAsB,UAACC,IAAD,EAAU;AAC/B,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB;AAAA,eAAMC,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAAC,CAAD,CAAR,CAAYD,IAAxB,CAAN;AAAA,OAAjB;;AACAQ,MAAAA,MAAM,CAACK,OAAP,GAAiB;AAAA,eAAMF,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAAC,CAAD,CAAR,CAAYD,IAAxB,CAAN;AAAA,OAAjB;;AACAQ,MAAAA,MAAM,CAACM,MAAP,GAAgB,YAAM;AACrB;AACA,YAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAzB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,OAJD;;AAKAP,MAAAA,MAAM,CAACS,iBAAP,CAAyBV,IAAzB;AACA,KAXD;AAaA,GAdc,EAcZ,EAdY,CAAf;;AAFyC,qBAkBDT,WAAW,CAAC;AAAEI,IAAAA,MAAM,EAANA;AAAF,GAAD,CAlBV;AAAA,MAkBjCgB,YAlBiC,gBAkBjCA,YAlBiC;AAAA,MAkBnBC,aAlBmB,gBAkBnBA,aAlBmB;;AAmBzC,MAAMC,SAAS,GAAGpB,IAAI,CAACqB,KAAL,CAAW,GAAX,CAAlB;AAEA,SACC,0BAASH,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACC,4BAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,SAAS,CAAC,CAAD,CAAhB,CAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,SAAS,CAAC,CAAD,CAAhB,CAHD,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUA,SAAS,CAAC,CAAD,CAAnB,cAA0BA,SAAS,CAAC,CAAD,CAAnC,EAJD,CADD;AAQA,CA7BD;;AA+BA,eAAerB,SAAf","sourcesContent":["import { useDropzone } from 'react-dropzone'\n\nconst DragNDrop = ({ text, messages }) => {\n\n\tconst onDrop = React.useCallback((acceptedFiles) => {\n\t\tacceptedFiles.forEach((file) => {\n\t\t\tconst reader = new FileReader()\n\n\t\t\treader.onabort = () => console.log(messages[1].text)\n\t\t\treader.onerror = () => console.log(messages[1].text)\n\t\t\treader.onload = () => {\n\t\t\t\t// Do whatever you want with the file contents\n\t\t\t\tconst binaryStr = reader.result\n\t\t\t\tconsole.log(binaryStr)\n\t\t\t}\n\t\t\treader.readAsArrayBuffer(file)\n\t\t})\n\n\t}, [])\n\t\n\tconst { getRootProps, getInputProps } = useDropzone({ onDrop })\n\tconst textParts = text.split(' ');\n\n\treturn (\n\t\t<div {...getRootProps()}>\n\t\t\t<input {...getInputProps()} />\n\t\t\t<span>{textParts[0]}</span>\n\t\t\t<span>{textParts[1]}</span>\n\t\t\t<span>{`${textParts[2]} ${textParts[3]}`}</span>\n\t\t</div>\n\t)\n}\n\nexport default DragNDrop;"]},"metadata":{},"sourceType":"module"}