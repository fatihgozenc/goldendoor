{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport dynamic from 'next/dynamic';\nimport { NextSeo } from 'next-seo';\nimport serialize from 'serialize-javascript';\nimport Breadcrumb from '../../Breadcrumb';\nimport Obfuscate from 'react-obfuscate';\nimport parse from 'html-react-parser';\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from 'react-datepicker';\nimport SendingQuery from '../../SendingQuery';\nimport './style.scss';\nconst MapContainer = dynamic(() => import('../../MapContainer'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../MapContainer')],\n    modules: ['../../MapContainer']\n  }\n});\nexport default (({\n  data,\n  layout,\n  lang\n}) => {\n  console.log(data);\n  const contactInfo = layout.footer.info;\n  const steps = [data.fields.kontakt_stufe_1, data.fields.kontakt_stufe_2, data.fields.kontakt_stufe_3];\n  const [eventDate, setEventDate] = React.useState(new Date());\n  const [elusiveDate, setElusiveDate] = React.useState(new Date());\n  const [beginTime, setBeginTime] = React.useState(new Date());\n  const [endTime, setEndTime] = React.useState(new Date());\n  const formSteps = React.useRef();\n  const stepSlider = React.useRef();\n  const dateRange = React.useRef();\n  const dates = React.useRef();\n  const firstStepLock = React.useRef();\n  const secondStepLock = React.useRef();\n  const successBlock = React.useRef();\n\n  const changeStep = e => {\n    const isDateAnswerOneChecked = firstStepLock.current.nextElementSibling.firstElementChild.checked;\n    const isDateAnswerTwoChecked = firstStepLock.current.nextElementSibling.nextElementSibling.firstElementChild.checked;\n    const ellipses = formSteps.current.parentElement.parentElement.firstElementChild.children;\n\n    if (isDateAnswerOneChecked === true || isDateAnswerTwoChecked === true) {\n      firstStepLock.current.parentElement.classList.remove('uncheckedField');\n\n      if (e.currentTarget.classList.contains('goFirst')) {\n        formSteps.current.classList.remove('atSecondStep');\n        ellipses[1].classList.remove('activeStep');\n        ellipses[0].classList.add('activeStep');\n      } else if (e.currentTarget.classList.contains('goNext')) {\n        if (secondStepLock.current.nextElementSibling.value.length > 0) {\n          formSteps.current.classList.remove('atSecondStep');\n          formSteps.current.classList.add('atThirdStep');\n          ellipses[1].classList.remove('activeStep');\n          ellipses[2].classList.add('activeStep');\n        } else {\n          secondStepLock.current.parentElement.classList.add('uncheckedField');\n        }\n      } else if (e.currentTarget.classList.contains('goSecond')) {\n        formSteps.current.classList.remove('atThirdStep');\n        formSteps.current.classList.add('atSecondStep');\n        ellipses[2].classList.remove('activeStep');\n        ellipses[1].classList.add('activeStep');\n      } else {\n        formSteps.current.classList.add('atSecondStep');\n        ellipses[0].classList.remove('activeStep');\n        ellipses[1].classList.add('activeStep');\n      }\n    } else {\n      firstStepLock.current.parentElement.classList.add('uncheckedField');\n    }\n  };\n\n  const removeUnchecked = e => {\n    e.currentTarget.parentElement.classList.contains('uncheckedField') === true ? e.currentTarget.parentElement.classList.remove('uncheckedField') : null;\n  };\n\n  const hideDates = e => {\n    const container = e.currentTarget.parentElement.parentElement;\n    const answerYes = e.currentTarget.parentElement.parentElement.children[1].firstElementChild;\n    container.classList.contains('uncheckedField') === true ? container.classList.remove('uncheckedField') : null;\n\n    if (answerYes.checked) {\n      dates.current.classList.remove('hidden');\n      dateRange.current.classList.add('hidden');\n    } else {\n      dates.current.classList.add('hidden');\n      dateRange.current.classList.remove('hidden');\n    }\n  };\n\n  const {\n    handleSubmit,\n    register,\n    errors\n  } = useForm();\n  const [submitted, setSubmitted] = React.useState(false);\n\n  const onSubmit = values => {\n    const dates = {\n      lang: lang,\n      eventdatum: eventDate.toDateString(),\n      ausweichtermin: elusiveDate.toDateString(),\n      eventzeitbeginn: beginTime.toLocaleTimeString('de-DE'),\n      eventzeitend: endTime.toLocaleTimeString('de-DE')\n    };\n\n    const finalForm = _objectSpread({}, values, {}, dates);\n\n    fetch('/api/contact', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: serialize(finalForm)\n    }).then(res => {\n      res.status === 200 ? setSubmitted(!submitted) : '';\n    }).catch(err => console.log(err));\n  };\n\n  React.useEffect(() => {\n    stepSlider.current.firstElementChild.classList.add('activeStep');\n  }, []);\n  React.useEffect(() => {\n    console.log(submitted);\n\n    if (submitted) {\n      formSteps.current.classList.add('hideForm');\n      successBlock.current.classList.add('showSuccess');\n    }\n  }, [submitted]);\n  return __jsx(React.Fragment, null, __jsx(NextSeo, {\n    title: data.fields.seo.title,\n    description: data.fields.seo.description\n  }), __jsx(\"div\", {\n    className: \"page__title page__title--contact\"\n  }, __jsx(Breadcrumb, {\n    slug: data.slug,\n    title: data.title\n  }), __jsx(\"h1\", null, data.title)), __jsx(\"div\", {\n    className: \"contact\"\n  }, __jsx(\"div\", {\n    ref: stepSlider,\n    className: \"contact__stepslider\"\n  }, steps.map((item, key) => __jsx(\"div\", {\n    key: key,\n    className: \"contact__stepslider--ellipse\"\n  }, __jsx(\"span\", null, key + 1)))), __jsx(\"div\", {\n    className: \"contact--wrapper\"\n  }, __jsx(\"form\", {\n    className: \"contact__steps\",\n    ref: formSteps,\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"contact__step\"\n  }, __jsx(\"div\", {\n    className: \"contact__step--flexWrapper\"\n  }, __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"event_type\",\n    className: \"label__select\"\n  }, steps[0].kontakt_frage_1.frage), __jsx(\"select\", {\n    name: \"event_type\",\n    ref: register\n  }, __jsx(\"optgroup\", null, steps[0].kontakt_frage_1.optionen.map((item, key) => __jsx(\"option\", {\n    key: key,\n    value: item.option\n  }, item.option))))), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"event_location\",\n    className: \"label__select\"\n  }, steps[0].kontakt_frage_2.frage), __jsx(\"select\", {\n    ref: register,\n    name: \"event_location\"\n  }, __jsx(\"optgroup\", null, steps[0].kontakt_frage_2.optionen.map((item, key) => __jsx(\"option\", {\n    key: key,\n    value: item.option\n  }, item.option)))))), __jsx(\"div\", {\n    className: \"contact__step--flexWrapper-xl\"\n  }, __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    ref: firstStepLock,\n    htmlFor: \"event_date_answer\",\n    className: \"contact__stepblock--inner\"\n  }, steps[0].kontakt_frage_3.frage), steps[0].kontakt_frage_3.optionen.map((item, key) => __jsx(\"p\", {\n    className: \"contact__stepblock--inner\",\n    key: key\n  }, __jsx(\"input\", {\n    onClick: hideDates,\n    ref: register,\n    className: \"input__radio\",\n    type: \"radio\",\n    name: \"event_date_answer\",\n    value: item.option\n  }), __jsx(\"span\", {\n    className: \"label__radio\"\n  }, item.option)))), __jsx(\"div\", {\n    className: \"contact__stepblock\",\n    ref: dateRange\n  }, __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: \"date_range\"\n  }, steps[0].kontakt_frage_5), __jsx(\"input\", {\n    className: \"input__text\",\n    name: \"date_range\",\n    ref: register,\n    type: \"text\"\n  })), __jsx(\"div\", {\n    ref: dates,\n    className: \"contact__stepblock contact__stepblock--datewrapper hidden\"\n  }, __jsx(\"div\", {\n    className: \"contact__stepblock--date\"\n  }, __jsx(\"label\", {\n    htmlFor: \"date_of_event\"\n  }, steps[0].kontakt_frage_6.datum), __jsx(DatePicker, {\n    selected: eventDate,\n    name: \"eventdatum\",\n    ref: register,\n    onChange: date => setEventDate(date)\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock--date\"\n  }, __jsx(\"label\", {\n    htmlFor: \"date_of_elusive\"\n  }, steps[0].kontakt_frage_6.ausweichtermin), __jsx(DatePicker, {\n    selected: elusiveDate,\n    name: \"ausweichtermin\",\n    ref: register,\n    onChange: date => setElusiveDate(date)\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock--date\"\n  }, __jsx(\"label\", {\n    htmlFor: \"date_of_elusive\"\n  }, steps[0].kontakt_frage_6.beginn), __jsx(DatePicker, {\n    ref: register,\n    name: \"event_beginn_zeit\",\n    showTimeSelect: true,\n    showTimeSelectOnly: true,\n    timeIntervals: 15,\n    timeCaption: \"Time\",\n    dateFormat: \"h:mm aa\",\n    selected: beginTime,\n    onChange: date => setBeginTime(date)\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock--date\"\n  }, __jsx(\"label\", {\n    htmlFor: \"date_of_elusive\"\n  }, steps[0].kontakt_frage_6.ende), __jsx(DatePicker, {\n    name: \"event_end_zeit\",\n    showTimeSelect: true,\n    showTimeSelectOnly: true,\n    timeIntervals: 15,\n    timeCaption: \"Time\",\n    dateFormat: \"h:mm aa\",\n    selected: endTime,\n    onChange: date => setEndTime(date)\n  })))), __jsx(\"a\", {\n    href: \"#\",\n    className: \"golden__button golden__button--center\",\n    onClick: changeStep\n  }, data.fields.buttonfelder.prufen)), __jsx(\"div\", {\n    className: \"contact__step\"\n  }, __jsx(\"h3\", null, steps[1].feld_1.titel), __jsx(\"div\", {\n    className: \"contact__step--wrapper\"\n  }, __jsx(\"div\", {\n    className: \"contact__step--flexWrapper\"\n  }, __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    ref: secondStepLock,\n    className: \"label__text\",\n    htmlFor: \"personenzahl\"\n  }, steps[1].feld_1.frage_1), __jsx(\"input\", {\n    onChange: removeUnchecked,\n    type: \"text\",\n    ref: register({\n      required: true,\n      maxLength: 30\n    }),\n    className: \"input__text\",\n    name: \"personenzahl\"\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"event_max_budget\",\n    className: \"contact__stepblock--inner\"\n  }, steps[1].feld_1.frage_2.fragefeld), _Object$values(steps[1].feld_1.frage_2.optionen).map((item, key) => __jsx(\"p\", {\n    className: \"contact__stepblock--inner\",\n    key: key\n  }, __jsx(\"input\", {\n    ref: register,\n    type: \"radio\",\n    className: \"input__radio\",\n    name: \"event_max_budget\",\n    value: item\n  }), __jsx(\"span\", {\n    className: \"label__radio\"\n  }, item))))), __jsx(\"h3\", null, steps[1].feld_2.titel), __jsx(\"div\", {\n    className: \"contact__step--flexWrapper-xl\"\n  }, _Object$values(steps[1].feld_2).slice(1).map((item, key) => __jsx(\"div\", {\n    key: key,\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: `event_${item.fragefeld.toLowerCase()}`,\n    className: \"label__select\"\n  }, item.fragefeld), __jsx(\"select\", {\n    ref: register,\n    name: `event_${item.fragefeld.toLowerCase()}`\n  }, item.optionen.map((subItem, subKey) => __jsx(\"option\", {\n    key: subKey,\n    value: subItem.option\n  }, subItem.option))))))), __jsx(\"div\", {\n    className: \"contact__buttongroup\"\n  }, __jsx(\"a\", {\n    href: \"#\",\n    onClick: changeStep,\n    className: \"golden__button goFirst\"\n  }, data.fields.buttonfelder.zuruck), __jsx(\"a\", {\n    href: \"#\",\n    onClick: changeStep,\n    className: \"golden__button goNext\"\n  }, data.fields.buttonfelder.weiter))), __jsx(\"div\", {\n    className: \"contact__step\"\n  }, __jsx(\"h3\", null, steps[2].titel), __jsx(\"div\", {\n    className: \"contact__step--flexWrapper\"\n  }, __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"kontakt_anrede\",\n    className: \"label__select\"\n  }, steps[2].anredefeld.frage), __jsx(\"select\", {\n    ref: register,\n    name: \"kontakt_anrede\"\n  }, steps[2].anredefeld.sex.map((item, key) => __jsx(\"option\", {\n    key: key,\n    value: item.option\n  }, item.option)))), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `kontakt_company`\n  }, steps[2].andere_fragen.firma), __jsx(\"input\", {\n    ref: register({\n      maxlength: 40\n    }),\n    className: \"input__text\",\n    type: \"text\",\n    name: `kontakt_company`\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `kontakt_name`\n  }, steps[2].andere_fragen.vorname), __jsx(\"input\", {\n    ref: register({\n      required: true,\n      maxlength: 20,\n      pattern: /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n    }),\n    className: \"input__text\",\n    type: \"text\",\n    name: `kontakt_name`\n  }), errors.kontakt_name && data.fields.fehlerfelder[1].text.toUpperCase()), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `kontakt_surname`\n  }, steps[2].andere_fragen.nachname), __jsx(\"input\", {\n    ref: register({\n      required: true,\n      maxlength: 25,\n      pattern: /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n    }),\n    className: \"input__text\",\n    type: \"text\",\n    name: `kontakt_surname`\n  }), errors.kontakt_surname && data.fields.fehlerfelder[1].text.toUpperCase()), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `kontakt_email`\n  }, steps[2].andere_fragen.email), __jsx(\"input\", {\n    ref: register({\n      required: true,\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: `UNGÜLTIGE E-MAIL-ADRESSE`\n      }\n    }),\n    className: \"input__text\",\n    type: \"email\",\n    name: `kontakt_email`\n  }), errors.kontakt_email && errors.kontakt_email.message), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    className: \"label__text\",\n    htmlFor: `kontakt_phone`\n  }, steps[2].andere_fragen.telefon), __jsx(\"input\", {\n    ref: register({\n      maxlength: 35\n    }),\n    className: \"input__text\",\n    type: \"tel\",\n    name: `kontakt_phone`\n  })), __jsx(\"div\", {\n    className: \"contact__stepblock\"\n  }, __jsx(\"label\", {\n    htmlFor: \"event_nachricht\"\n  }, steps[0].kontakt_frage_4), __jsx(\"textarea\", {\n    ref: register,\n    name: \"event_nachricht\",\n    cols: \"30\",\n    rows: \"5\"\n  }))), __jsx(\"div\", {\n    className: \"contact__buttongroup\"\n  }, __jsx(\"a\", {\n    href: \"#\",\n    onClick: changeStep,\n    className: \"golden__button goSecond\"\n  }, data.fields.buttonfelder.zuruck), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"golden__button\"\n  }, data.fields.buttonfelder.senden)))), __jsx(\"div\", {\n    className: \"contact__success\"\n  }, __jsx(\"div\", {\n    ref: successBlock,\n    className: \"contact__success--wrapper\"\n  }, submitted && __jsx(SendingQuery, {\n    color: \"#C2AC84\",\n    message: data.fields.fehlerfelder[2].text\n  }))))), __jsx(\"div\", {\n    className: \"contact__info\"\n  }, __jsx(\"div\", {\n    className: \"contact__info--map\"\n  }, __jsx(MapContainer, {\n    data: data.fields.karte_koordinaten\n  })), __jsx(\"div\", {\n    className: \"contact__info--address\"\n  }, __jsx(\"div\", {\n    className: \"contact__info--logo\"\n  }, __jsx(\"img\", {\n    src: contactInfo.logo,\n    alt: \"Golden Door Logo\"\n  })), _Object$values(contactInfo.address).map((item, key) => __jsx(\"div\", {\n    key: key\n  }, parse(item))), __jsx(Obfuscate, {\n    tel: contactInfo.telefon.split('T:')[1]\n  }), __jsx(Obfuscate, {\n    email: contactInfo.email.toLowerCase()\n  }))));\n});","map":null,"metadata":{},"sourceType":"module"}