{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar _jsxFileName = \"/Users/macbook/repos/goldendoor-next/components/loopingGallery/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport LoopingRow from './LoopingRow';\nimport './style.scss';\nexport default function ({\n  data,\n  windowWidth,\n  windowHeight\n}) {\n  //FUNCTION FOR DISTRIBUTING DATA INTO EQUAL ROWS FROM GIVEN JSON.\n  const distributeImageData = (arr, rows) => {\n    const rowImgCount = Math.ceil(arr.length / rows);\n\n    const emptyData = _Array$from({\n      length: rows\n    }, () => [0]);\n\n    const slicedData = emptyData.map((x, key) => {\n      if (key === 0) {\n        return arr.slice(key, rowImgCount);\n      } else if (key === rows - 1) {\n        return arr.slice(rowImgCount * key, -1);\n      } else {\n        return arr.slice(rowImgCount * key, rowImgCount * (key + 1));\n      }\n    });\n    return slicedData;\n  }; //I WANT 4 COLUMNS SO THIS NEEDS TO BE TYPED.\n\n\n  const loopingRowData = distributeImageData(data, windowWidth > 1600 ? 4 : 3);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"looping_gallery\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, loopingRowData.map((rowData, key) => __jsx(LoopingRow, {\n    windowWidth: windowWidth,\n    windowHeight: windowHeight,\n    key: key,\n    rowNumber: key + 1,\n    data: rowData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }))));\n}\n;","map":{"version":3,"sources":["/Users/macbook/repos/goldendoor-next/components/loopingGallery/index.js"],"names":["React","LoopingRow","data","windowWidth","windowHeight","distributeImageData","arr","rows","rowImgCount","Math","ceil","length","emptyData","slicedData","map","x","key","slice","loopingRowData","rowData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,cAAP;AAEA,eAAe,UAAS;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA;AAArB,CAAT,EAA8C;AAE5D;AACA,QAAMC,mBAAmB,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1C,UAAMC,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAWJ,GAAG,CAACK,MAAL,GAAeJ,IAAzB,CAApB;;AACA,UAAMK,SAAS,GAAG,YAAW;AAAED,MAAAA,MAAM,EAAEJ;AAAV,KAAX,EAA6B,MAAM,CAAC,CAAD,CAAnC,CAAlB;;AACA,UAAMM,UAAU,GAAGD,SAAS,CAACE,GAAV,CAAc,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC5C,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACd,eAAOV,GAAG,CAACW,KAAJ,CAAUD,GAAV,EAAeR,WAAf,CAAP;AACA,OAFD,MAEO,IAAIQ,GAAG,KAAKT,IAAI,GAAG,CAAnB,EAAsB;AAC5B,eAAOD,GAAG,CAACW,KAAJ,CAAWT,WAAW,GAAGQ,GAAzB,EAA+B,CAAC,CAAhC,CAAP;AACA,OAFM,MAEA;AACN,eAAOV,GAAG,CAACW,KAAJ,CAAWT,WAAW,GAAGQ,GAAzB,EAAgCR,WAAW,IAAIQ,GAAG,GAAG,CAAV,CAA3C,CAAP;AACA;AACD,KARkB,CAAnB;AASA,WAAOH,UAAP;AACA,GAbD,CAH4D,CAkB5D;;;AACA,QAAMK,cAAc,GAAGb,mBAAmB,CAACH,IAAD,EAAOC,WAAW,GAAG,IAAd,GAAqB,CAArB,GAAyB,CAAhC,CAA1C;AAEA,SACC,4BACA;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEe,cAAc,CAACJ,GAAf,CAAmB,CAACK,OAAD,EAAUH,GAAV,KACnB,MAAC,UAAD;AACC,IAAA,WAAW,EAAEb,WADd;AAEC,IAAA,YAAY,EAAEC,YAFf;AAGC,IAAA,GAAG,EAAEY,GAHN;AAIC,IAAA,SAAS,EAAEA,GAAG,GAAG,CAJlB;AAKC,IAAA,IAAI,EAAEG,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CADA,CADD;AAcA;AAAA","sourcesContent":["import React from 'react'\nimport LoopingRow from './LoopingRow'\nimport './style.scss'\n\nexport default function({ data, windowWidth, windowHeight }) {\n\n\t//FUNCTION FOR DISTRIBUTING DATA INTO EQUAL ROWS FROM GIVEN JSON.\n\tconst distributeImageData = (arr, rows) => {\n\t\tconst rowImgCount = Math.ceil((arr.length) / rows);\n\t\tconst emptyData = Array.from({ length: rows }, () => [0]);\n\t\tconst slicedData = emptyData.map((x, key) => {\n\t\t\tif (key === 0) {\n\t\t\t\treturn arr.slice(key, rowImgCount)\n\t\t\t} else if (key === rows - 1) {\n\t\t\t\treturn arr.slice((rowImgCount * key), -1)\n\t\t\t} else {\n\t\t\t\treturn arr.slice((rowImgCount * key), (rowImgCount * (key + 1)))\n\t\t\t}\n\t\t})\n\t\treturn slicedData;\n\t};\n\n\t//I WANT 4 COLUMNS SO THIS NEEDS TO BE TYPED.\n\tconst loopingRowData = distributeImageData(data, windowWidth > 1600 ? 4 : 3);\n\n\treturn (\n\t\t<>\n\t\t<div className=\"looping_gallery\">\n\t\t\t{loopingRowData.map((rowData, key) => (\n\t\t\t\t<LoopingRow \n\t\t\t\t\twindowWidth={windowWidth} \n\t\t\t\t\twindowHeight={windowHeight} \n\t\t\t\t\tkey={key} \n\t\t\t\t\trowNumber={key + 1} \n\t\t\t\t\tdata={rowData} />\n\t\t\t))}\n\t\t</div>\n\t\t</>\n\t)\n};"]},"metadata":{},"sourceType":"module"}